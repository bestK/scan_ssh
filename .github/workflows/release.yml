name: Release Build

on:
    release:
        types: [created]
    workflow_dispatch:
        inputs:
            platform:
                description: '构建平台 (例如: windows/amd64, linux/arm64)'
                required: false
                type: string

jobs:
    release:
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Set up Go
              uses: actions/setup-go@v4
              with:
                  go-version: '1.22'
                  cache: true

            - name: Install Cross Compilers
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gcc-multilib gcc-mingw-w64 gcc-aarch64-linux-gnu upx

            - name: Build Multi-Platform Binaries
              run: |
                  VERSION=${GITHUB_REF#refs/tags/}
                  if [ -z "$VERSION" ]; then
                      VERSION=$(git describe --tags --always)
                  fi
                  BUILD_TIME=$(date -u '+%Y-%m-%d %H:%M:%S')
                  GIT_COMMIT=$(git rev-parse --short HEAD)

                  echo "Version: $VERSION"
                  echo "Build Time: $BUILD_TIME"
                  echo "Git Commit: $GIT_COMMIT"

                  mkdir -p build

                  if [ -n "${{ github.event.inputs.platform }}" ]; then
                      platforms=("${{ github.event.inputs.platform }}")
                  else
                      platforms=(
                          "windows/amd64"
                          "windows/386"
                          "linux/amd64"
                          "linux/arm64"
                          "linux/386"
                      )
                  fi

                  for platform in "${platforms[@]}"; do
                      GOOS=${platform%/*}
                      GOARCH=${platform#*/}
                      output_name="scan_ssh-${GOOS}-${GOARCH}-${VERSION}"
                      [ "$GOOS" = "windows" ] && output_name="${output_name}.exe"

                      echo "Building for ${GOOS}/${GOARCH}..."
                      
                      CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
                          -trimpath \
                          -ldflags "-s -w \
                              -X 'github.com/bestk/scan_ssh/pkg/version.Version=${VERSION}' \
                              -X 'github.com/bestk/scan_ssh/pkg/version.CommitHash=${GIT_COMMIT}' \
                              -X 'github.com/bestk/scan_ssh/pkg/version.BuildTime=${BUILD_TIME}'" \
                          -o "build/$output_name" .

                      if [ $? -ne 0 ]; then
                          echo "Build failed for ${GOOS}/${GOARCH}"
                          exit 1
                      fi

                      echo "Compressing binary with UPX..."
                      upx --best --lzma "build/$output_name"
                  done

            - name: Create Release
              uses: softprops/action-gh-release@v1
              if: startsWith(github.ref, 'refs/tags/')
              with:
                  files: build/*
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
